// Context is a mechanism in React that allows you to share data across components in your application tree
// without having to explicitly pass props through multiple levels.

import { createContext, useReducer } from 'react';

// create a new context object.
export const ExpensesContext = createContext({
  expenses: [], // initial state of the context.

  // methods (placeholder) to update the state of the context.
  setExpenses: expenses => {},
  addExpense: ({ description, amout, date }) => {},
  deleteExpense: id => {},
  updateExpense: (id, { description, amout, date }) => {}
});

function expensesReducer(state, action) {
  switch (action.type) {
    case 'SET':
      const inverted = action.payload.reverse(); // to get the latest expenses first (Firebase Realtime stores the data in the order it is entered).
      return inverted;
    case 'ADD':
      return [action.payload, ...state]; // action.payload does include an 'id' which was generated by Firebase Realtime database.
    case 'DELETE':
      return state.filter(expense => expense.id !== action.payload);
    case 'UPDATE':
      const updatableExpenseIndex = state.findIndex(expense => expense.id === action.payload.id);
      const updatableExpense = state[updatableExpenseIndex];
      const updatedItem = { ...updatableExpense, ...action.payload.data };
      const updatedExpenses = [...state];
      updatedExpenses[updatableExpenseIndex] = updatedItem;
      return updatedExpenses;
    default:
      return state;
  }
}

// Provider component to implement the state management logic.
// This component will be used to wrap the entire application and provide the context to all of its children.
// This component will also provide the initial state of the context and the methods to update the state of the logic.
function ExpensesContextProvider({ children }) {
  const [expensesState, dispatch] = useReducer(expensesReducer, []);

  // update the state of the context with expenses fetched from the database.
  function setExpenses(expenses) {
    dispatch({ type: 'SET', payload: expenses });
  }

  function addExpense(expenseData) {
    dispatch({ type: 'ADD', payload: expenseData });
  }

  function deleteExpense(id) {
    dispatch({ type: 'DELETE', payload: id });
  }

  function updateExpense(id, expenseData) {
    dispatch({ type: 'UPDATE', payload: { id, data: expenseData } });
  }

  const value = {
    expenses: expensesState,
    setExpenses,
    addExpense,
    deleteExpense,
    updateExpense
  };

  return <ExpensesContext.Provider value={value}>{children}</ExpensesContext.Provider>;
}

export default ExpensesContextProvider;
